# Extraction funtion
function extract()
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# Open file with appropriate application
function o() 
{
     if [ -f $1 ] ; then
         case $1 in
             *.png)     gthumb $1     ;;
             *.jpg)     gthumb $1     ;;
             *.gif)     gthumb $1     ;;
             *.pdf)     evince $1     ;;
             *.ppt)     ooimpress $1  ;;
             *.pptx)    ooimpress $1  ;;
             *.xlsx)    oocalc $1     ;;
             *.html)    firefox $1    ;;
             *.htm)     firefox $1    ;;
             *)         gvim   $1     ;;
         esac
     else
         echo "'$1' is probably a directory and can thus not be opened by this script"
     fi

}

# Command repeat function. Repeat command n times
function repeat()
{
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do  # --> C-like syntax
        eval "$@";
    done
}

# mkdir and cd to new directory
function mkcd() {
    if [ $# != 1 ]; then
        echo "Usage: mkcd <dir>"
    else
        mkdir -p $1 && cd $1
    fi
}

# Make current directory safe from rm -rf *
function safedir() {
    touch -- -i
}
unsafedir() {
    if [ -f ./-i ] ; then
        rm ./-i
    fi
}

# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------
function cb() {
    local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
    # Check that xclip is installed.
    if ! type xclip > /dev/null 2>&1; then
        echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
        # Check user is not root (root doesn't have access to user xorg server)
    elif [[ "$USER" == "root" ]]; then
        echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
    else
        # If no tty, data should be available on stdin
        if ! [[ "$( tty )" == /dev/* ]]; then
            input="$(< /dev/stdin)"
            # Else, fetch input from params
        else
            input="$*"
        fi
        if [ -z "$input" ]; then  # If no input, print usage message.
            echo "Copies a string to the clipboard."
            echo "Usage: cb <string>"
            echo "       echo <string> | cb"
        else
            # Copy input to clipboard
            echo -n "$input" | xclip -selection c
            # Truncate text for status
            if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
            # Print status.
            echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
        fi
    fi
}
# Aliases / functions leveraging the cb() function
# ------------------------------------------------
# Copy contents of a file
function cbf() {
    cat "$1" | cb;
}
# Copy SSH public key
function cbssh() {
    cbf ~/.ssh/id_rsa.pub
}
# Copy current working directory
function cbwd() {
    pwd | cb
}
# Copy most recent command in bash history
function cbhs() {
    cat $HISTFILE | tail -n 1 | cb
}

function up() {
    local d=""
    limit=$1
    for ((i=1 ; i <= limit ; i++))
        do
        d=$d/..
        done
    d=$(echo $d | sed 's/^\///')
    if [ -z "$d" ]; then
        d=..
    fi
    cd $d
}

